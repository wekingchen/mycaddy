name: Build and Release Caddy with Forwardproxy

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 00:00 运行
  workflow_dispatch:
    inputs:
      force_build:
        description: '是否强制编译？'
        required: false
        default: 'false'
        
permissions:
  contents: write

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      new_commit: ${{ steps.check.outputs.new_commit }}
    steps:
      - name: 获取 forwardproxy naive 分支的最新 commit
        id: check
        run: |
          # 获取 naive 分支的最新 Commit ID
          LATEST_COMMIT=$(curl -s https://api.github.com/repos/klzgrad/forwardproxy/commits/naive | jq -r '.sha')
          echo "Latest commit: $LATEST_COMMIT"

          # **手动触发时，检查是否强制编译**
          if [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
              echo "🔄 手动触发编译..."
              echo "new_commit=forced" >> $GITHUB_ENV
              echo "new_commit=forced" >> $GITHUB_OUTPUT
              exit 0
          fi

          # 获取上次 Release 记录的 Commit ID
          RELEASE_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.body')

          # 清理 Markdown 特殊字符，确保 grep 能正确匹配
          CLEANED_BODY=$(echo "$RELEASE_BODY" | sed 's/\*\*//g' | sed 's/🔍//g')
          echo "Cleaned Release body: $CLEANED_BODY"  # Debug 输出

          PREVIOUS_COMMIT=$(echo "$CLEANED_BODY" | grep -Eo 'Commit:\s*([a-f0-9]{40})' | awk '{print $2}')
          echo "Previous commit: $PREVIOUS_COMMIT"

          # **如果 `Previous commit` 为空，直接触发编译**
          if [[ -z "$PREVIOUS_COMMIT" ]]; then
            echo "⚠️ 上次 Release 里没有 Commit 记录，强制编译！"
            echo "new_commit=$LATEST_COMMIT" >> $GITHUB_ENV
            echo "new_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
            exit 0
          fi

          # **如果 Commit 变更，则触发编译**
          if [[ "$LATEST_COMMIT" != "$PREVIOUS_COMMIT" ]]; then
            echo "🔄 forwardproxy 代码更新，开始编译..."
            echo "new_commit=$LATEST_COMMIT" >> $GITHUB_ENV
            echo "new_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "✅ forwardproxy 代码无变化，跳过编译"
            echo "new_commit=" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: 存储 `new_commit` 供后续任务使用
        run: echo "${{ steps.check.outputs.new_commit }}" > new_commit.txt

      - name: 上传 `new_commit.txt`（供 release 任务读取）
        uses: actions/upload-artifact@v4
        with:
          name: new_commit
          path: new_commit.txt

  build:
    needs: check-updates
    if: ${{ needs.check-updates.outputs.new_commit != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: 克隆 forwardproxy naive 分支
        run: |
          git clone --branch naive --depth 1 https://github.com/klzgrad/forwardproxy.git forwardproxy
          cd forwardproxy
          echo "Commit: $(git rev-parse HEAD)"

      - name: 安装 xcaddy
        run: |
          go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: 编译 Caddy (${{ matrix.arch }})
        run: |
          export GOOS=linux
          export GOARCH=${{ matrix.arch }}
          xcaddy build --output caddy_${{ matrix.arch }} \
          --with github.com/libdns/libdns@v0.2.3 \
          --with github.com/caddyserver/caddy/v2 \
          --with github.com/caddy-dns/cloudflare \
          --with github.com/caddy-dns/tencentcloud \
          --with github.com/caddy-dns/duckdns \
          --with github.com/mholt/caddy-dynamicdns \
          --with github.com/mholt/caddy-events-exec \
          --with github.com/WeidiDeng/caddy-cloudflare-ip \
          --with github.com/xcaddyplugins/caddy-trusted-cloudfront \
          --with github.com/mholt/caddy-webdav \
          --with github.com/caddyserver/forwardproxy@master=./forwardproxy \
          --with github.com/imgk/caddy-trojan

      - name: 上传编译结果 (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: caddy_${{ matrix.arch }}
          path: caddy_${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载 `new_commit.txt`
        uses: actions/download-artifact@v4
        with:
          name: new_commit
          path: .

      - name: 读取 `new_commit`
        id: get_commit
        run: |
          NEW_COMMIT=$(cat new_commit.txt)
          echo "原始 Commit ID: $NEW_COMMIT"

          # **如果 Commit 是 "forced"，则获取 forwardproxy 最新 commit**
          if [[ "$NEW_COMMIT" == "forced" ]]; then
            NEW_COMMIT=$(curl -s https://api.github.com/repos/klzgrad/forwardproxy/commits/naive | jq -r '.sha')
            echo "⚠️ 手动触发编译，使用最新 commit: $NEW_COMMIT"
          fi

          echo "NEW_COMMIT=$NEW_COMMIT" >> $GITHUB_ENV

      - name: 下载 `caddy_amd64`
        uses: actions/download-artifact@v4
        with:
          name: caddy_amd64
          path: .

      - name: 下载 `caddy_arm64`
        uses: actions/download-artifact@v4
        with:
          name: caddy_arm64
          path: .

      - name: 列出当前目录的所有文件
        run: |
          echo "📁 当前目录结构："
          ls -R

      - name: 获取 Caddy 最新版本
        id: get_caddy_version
        run: |
          CADDY_VERSION=$(curl -s https://api.github.com/repos/caddyserver/caddy/releases/latest | jq -r '.tag_name')
          CADDY_VERSION=${CADDY_VERSION#v}
          echo "Caddy 最新版本: $CADDY_VERSION"
          echo "CADDY_VERSION=$CADDY_VERSION" >> $GITHUB_ENV

      - name: 生成 Release 版本号
        id: version
        run: |
          RELEASE_TAG="v${{ env.CADDY_VERSION }}-$(date +%Y%m%d-%H%M%S)"
          echo "New tag: $RELEASE_TAG"
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_ENV

      - name: 生成 Release 描述
        id: release_body
        run: |
          if [[ -z "$NEW_COMMIT" ]]; then
            NEW_COMMIT="Unknown (检查变量传递)"
          fi

          cat <<EOF > release_notes.txt
          🚀 **NaiveProxy Caddy Release - ${{ env.release_tag }}**
          
          **📌 包含插件列表：**
          - ✅ forwardproxy（NaïveProxy 代理）
          - ✅ caddy-l4（TCP/UDP 代理）
          - ✅ caddy-dns/cloudflare（Cloudflare DNS 解析）
          - ✅ caddy-dns/dnspod（DNSPod 解析）
          - ✅ caddy-dns/duckdns（DuckDNS 解析）
          - ✅ caddy-dynamicdns（动态 DNS 更新）
          - ✅ caddy-events-exec（事件触发自动化）
          - ✅ caddy-cloudflare-ip（Cloudflare IP 解析）
          - ✅ caddy-trusted-cloudfront（CloudFront 可信代理）
          - ✅ caddy-webdav（WebDAV 服务器）
          - ✅ caddy-trojan（Trojan 协议支持）

          🔍 **Commit:** $NEW_COMMIT

          📥 **[下载二进制文件](https://github.com/${{ github.repository }}/releases/tag/${{ env.release_tag }})**
          EOF

      - name: 创建 Release 并上传二进制文件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.release_tag }}
          name: "NaiveProxy Caddy ${{ env.release_tag }}"
          body_path: release_notes.txt
          files: |
            caddy_amd64
            caddy_arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
