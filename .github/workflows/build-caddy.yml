name: Build and Release Caddy with Forwardproxy

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 00:00 运行
  workflow_dispatch:  # 允许手动触发，并可指定 tag
    inputs:
      custom_tag:
        description: "自定义 Release Tag（可选）"
        required: false
        default: ""

permissions:
  contents: write  # 允许创建 Release

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      new_commit: ${{ env.NEW_COMMIT }}
    steps:
      - name: 获取 forwardproxy naive 分支的最新 commit
        run: |
          LATEST_COMMIT=$(curl -s https://api.github.com/repos/klzgrad/forwardproxy/commits/naive | jq -r '.sha')
          echo "Latest commit: $LATEST_COMMIT"

          PREVIOUS_COMMIT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.body' | grep 'Commit:' | awk '{print $2}')

          echo "Previous commit: $PREVIOUS_COMMIT"

          if [[ "$LATEST_COMMIT" != "$PREVIOUS_COMMIT" ]]; then
            echo "NEW_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV
          else
            echo "No new commit, skipping build."
            exit 0
          fi

  build:
    needs: check-updates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: 克隆 forwardproxy naive 分支（只拉取最新 commit，加快速度）
        run: |
          git clone --branch naive --depth 1 https://github.com/klzgrad/forwardproxy.git forwardproxy
          cd forwardproxy
          echo "Commit: $(git rev-parse HEAD)"

      - name: 运行 `go mod tidy` 确保 `go.sum` 存在
        run: |
          cd forwardproxy
          go mod tidy
          if [ ! -f go.sum ]; then
            echo "⚠️ go.sum not found! Creating an empty one."
            touch go.sum
          fi
          ls -lh go.sum  # 确保 go.sum 存在
          cat go.sum | head -n 10  # 打印前 10 行内容

      - name: 安装 xcaddy（减少重复下载）
        run: |
          if ! command -v xcaddy &> /dev/null; then
            go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
            echo "$HOME/go/bin" >> $GITHUB_PATH
          fi

      - name: 编译 Caddy (${{ matrix.arch }})
        run: |
          export GOOS=linux
          export GOARCH=${{ matrix.arch }}
          xcaddy build --output caddy_${{ matrix.arch }} \
            --with github.com/mholt/caddy-l4 \
            --with github.com/caddy-dns/cloudflare \
            --with github.com/caddy-dns/dnspod \
            --with github.com/caddy-dns/duckdns \
            --with github.com/mholt/caddy-dynamicdns \
            --with github.com/mholt/caddy-events-exec \
            --with github.com/WeidiDeng/caddy-cloudflare-ip \
            --with github.com/xcaddyplugins/caddy-trusted-cloudfront \
            --with github.com/mholt/caddy-webdav \
            --with github.com/caddyserver/forwardproxy@master=./forwardproxy \
            --with github.com/imgk/caddy-trojan || { echo "❌ 编译失败！"; exit 1; }

      - name: 上传编译结果 (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: caddy_${{ matrix.arch }}
          path: caddy_${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载编译好的二进制文件
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 生成 Release 版本号
        id: version
        run: |
          if [[ -n "${{ github.event.inputs.custom_tag }}" ]]; then
            RELEASE_TAG="${{ github.event.inputs.custom_tag }}"
          else
            RELEASE_TAG="naive-$(date +%Y%m%d-%H%M%S)"
          fi
          echo "New tag: $RELEASE_TAG"
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_ENV

      - name: 创建 Release 并上传二进制文件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.release_tag }}
          name: "NaiveProxy Caddy v${{ env.release_tag }}"
          body: |
            🚀 **自动构建的 Caddy 版本**，包含 forwardproxy 和多个插件。
            🔍 **Commit:** ${{ needs.check-updates.outputs.new_commit }}
          files: |
            artifacts/caddy_amd64/caddy_amd64
            artifacts/caddy_arm64/caddy_arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
