name: Build and Release Caddy with Forwardproxy

on:
  schedule:
    # UTC 16:00 触发 → 北京时间每夜 00:00
    - cron: '0 16 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: '是否强制编译？'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      new_commit: ${{ steps.check.outputs.new_commit }}
    steps:
      - name: 获取 imgk/forwardproxy udpinhttp 分支最新 Commit
        id: check
        run: |
          LATEST=$(curl -s https://api.github.com/repos/imgk/forwardproxy/commits/udpinhttp | jq -r '.sha')
          echo "最新 Commit: $LATEST"
          if [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
            echo "🔄 手动触发，强制编译"
            echo "new_commit=forced" >> $GITHUB_OUTPUT
            exit 0
          fi
          # 拉取上次 Release Body 并提取 Commit
          BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.body')
          CLEAN=$(echo "$BODY" | tr -d '*' | tr -d '🔍')
          PREV=$(echo "$CLEAN" | grep -Eo 'Commit:\s*[0-9a-f]{40}' | awk '{print $2}')
          if [[ -z "$PREV" || "$LATEST" != "$PREV" ]]; then
            echo "🔄 发现更新或首次编译"
            echo "new_commit=$LATEST" >> $GITHUB_OUTPUT
          else
            echo "✅ 无更新，跳过"
            echo "new_commit=" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: 保存 new_commit
        run: echo "${{ steps.check.outputs.new_commit }}" > new_commit.txt

      - name: 上传 new_commit.txt
        uses: actions/upload-artifact@v4
        with:
          name: new_commit
          path: new_commit.txt

  build:
    needs: check-updates
    if: ${{ needs.check-updates.outputs.new_commit != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: 克隆 forwardproxy (udpinhttp)
        run: |
          git clone --branch udpinhttp --depth 1 https://github.com/imgk/forwardproxy.git forwardproxy

      - name: 安装 xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: 编译 Caddy (${{ matrix.arch }})
        run: |
          export GOOS=linux GOARCH=${{ matrix.arch }}
          xcaddy build --output caddy_${{ matrix.arch }} \
            --with github.com/caddyserver/jsonc-adapter \
            --with github.com/mholt/caddy-l4 \
            --with github.com/caddy-dns/cloudflare \
            --with github.com/caddy-dns/tencentcloud \
            --with github.com/caddy-dns/duckdns \
            --with github.com/mholt/caddy-dynamicdns \
            --with github.com/mholt/caddy-events-exec \
            --with github.com/WeidiDeng/caddy-cloudflare-ip \
            --with github.com/xcaddyplugins/caddy-trusted-cloudfront \
            --with github.com/mholt/caddy-webdav \
            --with github.com/caddyserver/forwardproxy@master=./forwardproxy \
            --with github.com/imgk/caddy-trojan

      - name: 校验架构并打包
        run: |
          file caddy_${{ matrix.arch }}
          tar czf caddy_${{ matrix.arch }}.tar.gz caddy_${{ matrix.arch }}

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: caddy-${{ matrix.arch }}
          path: caddy_${{ matrix.arch }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载 new_commit
        uses: actions/download-artifact@v4
        with:
          name: new_commit
          path: .

      - id: get_commit
        run: |
          RAW=$(cat new_commit.txt)
          if [[ "$RAW" == "forced" ]]; then
            RAW=$(curl -s https://api.github.com/repos/imgk/forwardproxy/commits/udpinhttp | jq -r '.sha')
          fi
          echo "Forwardproxy Commit: $RAW"
          echo "COMMIT=$RAW" >> $GITHUB_ENV

      - name: 下载二进制包
        uses: actions/download-artifact@v4
        with:
          name: caddy-amd64
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: caddy-arm64
          path: .

      - id: get_caddy_version
        run: |
          VER=$(curl -s https://api.github.com/repos/caddyserver/caddy/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "CADDY_VERSION=$VER" >> $GITHUB_ENV

      - name: 生成 Release Tag
        run: |
          TAG="v${{ env.CADDY_VERSION }}-$(date +'%Y%m%d-%H%M%S')"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: 生成 Release Notes
        run: |
          cat <<EOF > release_notes.md
🚀 **NaiveProxy Caddy Release — ${{ env.TAG }}**

**包含插件列表：**
- forwardproxy（udpinhttp 分支）
- jsonc-adapter
- caddy-l4（TCP/UDP 代理）
- caddy-dns/cloudflare
- caddy-dns/tencentcloud
- caddy-dns/duckdns
- caddy-dynamicdns
- caddy-events-exec
- caddy-cloudflare-ip
- caddy-trusted-cloudfront
- caddy-webdav
- caddy-trojan

🔍 **Commit:** ${{ env.COMMIT }}

📥 [下载二进制文件](https://github.com/${{ github.repository }}/releases/tag/${{ env.TAG }})
EOF

      - name: 发布 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "NaiveProxy Caddy ${{ env.TAG }}"
          body_path: release_notes.md
          files: |
            caddy-amd64.tar.gz
            caddy-arm64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
