name: Daily NaiveProxy Build

# 触发条件：每日定时运行 + 手动触发
on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 00:00 执行（可根据需要调整时区）
  workflow_dispatch: # 支持手动触发

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    steps:
      # 检出当前仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 获取 forwardproxy 最新提交 SHA
      - name: Fetch forwardproxy latest commit
        id: fetch-commit
        run: |
          LATEST_SHA=$(curl -s https://api.github.com/repos/klzgrad/forwardproxy/commits/master | jq -r '.sha')
          echo "LATEST_SHA=$LATEST_SHA" >> $GITHUB_ENV
          # 检查是否已有记录的 SHA 文件
          if [ -f "forwardproxy-sha.txt" ]; then
            PREVIOUS_SHA=$(cat forwardproxy-sha.txt)
            echo "PREVIOUS_SHA=$PREVIOUS_SHA" >> $GITHUB_ENV
          else
            echo "PREVIOUS_SHA=none" >> $GITHUB_ENV
          fi

      # 判断是否需要编译
      - name: Check for updates
        id: check-updates
        run: |
          if [ "${{ env.LATEST_SHA }}" != "${{ env.PREVIOUS_SHA }}" ]; then
            echo "Update detected, proceeding with build."
            echo "needs_build=true" >> $GITHUB_ENV
          else
            echo "No update detected, skipping build."
            echo "needs_build=false" >> $GITHUB_ENV
          fi

      # 设置最新稳定版 Go 环境
      - name: Set up Go
        if: env.needs_build == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: 'stable' # 始终使用最新稳定版 Go

      # 安装依赖并克隆 forwardproxy
      - name: Install dependencies and clone forwardproxy
        if: env.needs_build == 'true'
        run: |
          # 安装 jq（用于解析 JSON）
          sudo apt-get update && sudo apt-get install -y jq
          # 安装 xcaddy
          go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
          # 确保 xcaddy 在 PATH 中
          echo "$HOME/go/bin" >> $GITHUB_PATH
          # 克隆 forwardproxy
          git clone https://github.com/klzgrad/forwardproxy.git
          cd forwardproxy

      # 编译 amd64 版本
      - name: Build for amd64
        if: env.needs_build == 'true'
        run: |
          cd forwardproxy
          export GOOS=linux
          export GOARCH=amd64
          xcaddy build --output ../caddy_amd64 \
            --with github.com/mholt/caddy-l4 \
            --with github.com/caddy-dns/cloudflare \
            --with github.com/caddy-dns/dnspod \
            --with github.com/caddy-dns/duckdns \
            --with github.com/mholt/caddy-dynamicdns \
            --with github.com/mholt/caddy-events-exec \
            --with github.com/WeidiDeng/caddy-cloudflare-ip \
            --with github.com/xcaddyplugins/caddy-trusted-cloudfront \
            --with github.com/mholt/caddy-webdav \
            --with github.com/caddyserver/forwardproxy@master=$PWD \
            --with github.com/imgk/caddy-trojan

      # 编译 arm64 版本
      - name: Build for arm64
        if: env.needs_build == 'true'
        run: |
          cd forwardproxy
          export GOOS=linux
          export GOARCH=arm64
          xcaddy build --output ../caddy_arm64 \
            --with github.com/mholt/caddy-l4 \
            --with github.com/caddy-dns/cloudflare \
            --with github.com/caddy-dns/dnspod \
            --with github.com/caddy-dns/duckdns \
            --with github.com/mholt/caddy-dynamicdns \
            --with github.com/mholt/caddy-events-exec \
            --with github.com/WeidiDeng/caddy-cloudflare-ip \
            --with github.com/xcaddyplugins/caddy-trusted-cloudfront \
            --with github.com/mholt/caddy-webdav \
            --with github.com/caddyserver/forwardproxy@master=$PWD \
            --with github.com/imgk/caddy-trojan

      # 验证二进制文件
      - name: Verify binaries
        if: env.needs_build == 'true'
        run: |
          file ./caddy_amd64
          file ./caddy_arm64

      # 创建 Release 并上传二进制文件
      - name: Create and upload release
        if: env.needs_build == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 生成版本号（基于日期和 SHA 前 7 位）
          VERSION="v$(date +%Y%m%d)-${{ env.LATEST_SHA:0:7 }}"
          # 创建 Release
          gh release create "$VERSION" \
            --title "NaiveProxy $VERSION" \
            --notes "Built with forwardproxy commit ${{ env.LATEST_SHA }}" \
            --draft=false \
            ./caddy_amd64 ./caddy_arm64
          # 更新 SHA 记录
          echo "${{ env.LATEST_SHA }}" > forwardproxy-sha.txt
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add forwardproxy-sha.txt
          git commit -m "Update forwardproxy SHA to ${{ env.LATEST_SHA }}"
          git push

      # 如果无更新，输出提示信息
      - name: Skip build message
        if: env.needs_build == 'false'
        run: echo "No new commits in forwardproxy, build skipped."
